2023-02-07 11:25:58,879 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.13 (default, Oct 18 2022, 18:57:03) [GCC 11.2.0]
CUDA available: True
GPU 0,1,2,3,4,5,6,7: GeForce RTX 3090
CUDA_HOME: /usr/local/cuda-11.1
NVCC: Cuda compilation tools, release 11.1, V11.1.74
GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
PyTorch: 1.10.1+cu111
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.11.2+cu111
OpenCV: 4.6.0
MMCV: 1.7.0
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.1
MMClassification: 0.25.0+
------------------------------------------------------------

2023-02-07 11:25:58,880 - mmcls - INFO - Distributed training: False
2023-02-07 11:25:59,017 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(3, ),
        style='pytorch'),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=5,
        in_channels=2048,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),
        topk=(1, 5)))
dataset_type = 'ImageNet'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='RandomResizedCrop', size=224),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', size=(256, -1)),
    dict(type='CenterCrop', crop_size=224),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=96,
    workers_per_gpu=1,
    train=dict(
        type='CustomDataset',
        data_prefix='./',
        ann_file='flower_dataset_split/train.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', size=224),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ]),
    val=dict(
        type='CustomDataset',
        data_prefix='./',
        ann_file='flower_dataset_split/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]),
    test=dict(
        type='CustomDataset',
        data_prefix='./',
        ann_file='flower_dataset_split/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]))
evaluation = dict(interval=1, metric='accuracy')
optimizer = dict(type='SGD', lr=0.0001, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', step=[30, 60, 90])
runner = dict(type='EpochBasedRunner', max_epochs=30)
checkpoint_config = dict(interval=1)
log_config = dict(interval=10, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = 'resnet50_8xb32_in1k_20210831-ea4938fc.pth'
resume_from = None
workflow = [('train', 1)]
work_dir = 'flower_cls_resnet50/'
gpu_ids = [3]

2023-02-07 11:25:59,018 - mmcls - INFO - Set random seed to 55923481, deterministic: False
2023-02-07 11:25:59,230 - mmcls - INFO - initialize ResNet with init_cfg [{'type': 'Kaiming', 'layer': ['Conv2d']}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
2023-02-07 11:25:59,430 - mmcls - INFO - initialize LinearClsHead with init_cfg {'type': 'Normal', 'layer': 'Linear', 'std': 0.01}
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.1.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.2.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.1.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.2.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.3.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.fc.weight - torch.Size([5, 2048]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fc.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 
2023-02-07 11:26:11,505 - mmcls - INFO - load checkpoint from local path: resnet50_8xb32_in1k_20210831-ea4938fc.pth
2023-02-07 11:26:11,617 - mmcls - WARNING - The model and loaded state dict do not match exactly

size mismatch for head.fc.weight: copying a param with shape torch.Size([1000, 2048]) from checkpoint, the shape in current model is torch.Size([5, 2048]).
size mismatch for head.fc.bias: copying a param with shape torch.Size([1000]) from checkpoint, the shape in current model is torch.Size([5]).
2023-02-07 11:26:11,621 - mmcls - INFO - Start running, host: ders@ders-SYS-4029GP-TRTC-ZY001, work_dir: /media/ders/linxin/mmclassification-master/flower_cls_resnet50
2023-02-07 11:26:11,622 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-02-07 11:26:11,622 - mmcls - INFO - workflow: [('train', 1)], max: 30 epochs
2023-02-07 11:26:11,622 - mmcls - INFO - Checkpoints will be saved to /media/ders/linxin/mmclassification-master/flower_cls_resnet50 by HardDiskBackend.
2023-02-07 11:26:17,898 - mmcls - INFO - Epoch [1][10/24]	lr: 1.000e-04, eta: 0:07:18, time: 0.618, data_time: 0.456, memory: 8234, loss: 1.6785
2023-02-07 11:26:22,465 - mmcls - INFO - Epoch [1][20/24]	lr: 1.000e-04, eta: 0:06:16, time: 0.457, data_time: 0.340, memory: 8234, loss: 1.6019
2023-02-07 11:26:23,890 - mmcls - INFO - Saving checkpoint at 1 epochs
2023-02-07 11:26:27,725 - mmcls - INFO - Epoch(val) [1][6]	accuracy_top-1: 37.5874, accuracy_top-5: 100.0000
2023-02-07 11:26:36,325 - mmcls - INFO - Epoch [2][10/24]	lr: 1.000e-04, eta: 0:06:28, time: 0.850, data_time: 0.724, memory: 8234, loss: 1.5099
2023-02-07 11:26:41,709 - mmcls - INFO - Epoch [2][20/24]	lr: 1.000e-04, eta: 0:06:18, time: 0.540, data_time: 0.417, memory: 8234, loss: 1.4422
2023-02-07 11:26:43,434 - mmcls - INFO - Saving checkpoint at 2 epochs
2023-02-07 11:26:47,380 - mmcls - INFO - Epoch(val) [2][6]	accuracy_top-1: 71.1538, accuracy_top-5: 100.0000
2023-02-07 11:26:55,760 - mmcls - INFO - Epoch [3][10/24]	lr: 1.000e-04, eta: 0:06:15, time: 0.829, data_time: 0.703, memory: 8234, loss: 1.3440
2023-02-07 11:27:01,553 - mmcls - INFO - Epoch [3][20/24]	lr: 1.000e-04, eta: 0:06:11, time: 0.579, data_time: 0.455, memory: 8234, loss: 1.2839
2023-02-07 11:27:03,486 - mmcls - INFO - Saving checkpoint at 3 epochs
2023-02-07 11:27:07,471 - mmcls - INFO - Epoch(val) [3][6]	accuracy_top-1: 83.2168, accuracy_top-5: 100.0000
2023-02-07 11:27:15,344 - mmcls - INFO - Epoch [4][10/24]	lr: 1.000e-04, eta: 0:06:01, time: 0.778, data_time: 0.659, memory: 8234, loss: 1.2039
2023-02-07 11:27:20,800 - mmcls - INFO - Epoch [4][20/24]	lr: 1.000e-04, eta: 0:05:54, time: 0.546, data_time: 0.423, memory: 8234, loss: 1.1555
2023-02-07 11:27:22,629 - mmcls - INFO - Saving checkpoint at 4 epochs
2023-02-07 11:27:26,533 - mmcls - INFO - Epoch(val) [4][6]	accuracy_top-1: 86.5385, accuracy_top-5: 100.0000
2023-02-07 11:27:32,902 - mmcls - INFO - Epoch [5][10/24]	lr: 1.000e-04, eta: 0:05:37, time: 0.627, data_time: 0.508, memory: 8234, loss: 1.0808
2023-02-07 11:27:37,527 - mmcls - INFO - Epoch [5][20/24]	lr: 1.000e-04, eta: 0:05:27, time: 0.463, data_time: 0.347, memory: 8234, loss: 1.0414
2023-02-07 11:27:39,094 - mmcls - INFO - Saving checkpoint at 5 epochs
2023-02-07 11:27:42,092 - mmcls - INFO - Epoch(val) [5][6]	accuracy_top-1: 88.2867, accuracy_top-5: 100.0000
2023-02-07 11:27:48,584 - mmcls - INFO - Epoch [6][10/24]	lr: 1.000e-04, eta: 0:05:14, time: 0.640, data_time: 0.523, memory: 8234, loss: 0.9818
2023-02-07 11:27:52,218 - mmcls - INFO - Epoch [6][20/24]	lr: 1.000e-04, eta: 0:05:01, time: 0.364, data_time: 0.246, memory: 8234, loss: 0.9419
2023-02-07 11:27:53,422 - mmcls - INFO - Saving checkpoint at 6 epochs
2023-02-07 11:27:56,423 - mmcls - INFO - Epoch(val) [6][6]	accuracy_top-1: 89.3357, accuracy_top-5: 100.0000
2023-02-07 11:28:02,398 - mmcls - INFO - Epoch [7][10/24]	lr: 1.000e-04, eta: 0:04:49, time: 0.588, data_time: 0.471, memory: 8234, loss: 0.8788
2023-02-07 11:28:06,217 - mmcls - INFO - Epoch [7][20/24]	lr: 1.000e-04, eta: 0:04:39, time: 0.382, data_time: 0.264, memory: 8234, loss: 0.8390
2023-02-07 11:28:07,460 - mmcls - INFO - Saving checkpoint at 7 epochs
2023-02-07 11:28:10,516 - mmcls - INFO - Epoch(val) [7][6]	accuracy_top-1: 91.2587, accuracy_top-5: 100.0000
2023-02-07 11:28:16,483 - mmcls - INFO - Epoch [8][10/24]	lr: 1.000e-04, eta: 0:04:29, time: 0.587, data_time: 0.470, memory: 8234, loss: 0.7893
2023-02-07 11:28:20,249 - mmcls - INFO - Epoch [8][20/24]	lr: 1.000e-04, eta: 0:04:20, time: 0.377, data_time: 0.261, memory: 8234, loss: 0.7811
2023-02-07 11:28:21,515 - mmcls - INFO - Saving checkpoint at 8 epochs
2023-02-07 11:28:24,608 - mmcls - INFO - Epoch(val) [8][6]	accuracy_top-1: 90.7343, accuracy_top-5: 100.0000
2023-02-07 11:28:30,616 - mmcls - INFO - Epoch [9][10/24]	lr: 1.000e-04, eta: 0:04:11, time: 0.591, data_time: 0.474, memory: 8234, loss: 0.7103
2023-02-07 11:28:34,407 - mmcls - INFO - Epoch [9][20/24]	lr: 1.000e-04, eta: 0:04:04, time: 0.379, data_time: 0.260, memory: 8234, loss: 0.7204
2023-02-07 11:28:35,614 - mmcls - INFO - Saving checkpoint at 9 epochs
2023-02-07 11:28:38,418 - mmcls - INFO - Epoch(val) [9][6]	accuracy_top-1: 92.3077, accuracy_top-5: 100.0000
2023-02-07 11:28:44,428 - mmcls - INFO - Epoch [10][10/24]	lr: 1.000e-04, eta: 0:03:55, time: 0.591, data_time: 0.474, memory: 8234, loss: 0.6623
2023-02-07 11:28:48,122 - mmcls - INFO - Epoch [10][20/24]	lr: 1.000e-04, eta: 0:03:48, time: 0.369, data_time: 0.251, memory: 8234, loss: 0.6675
2023-02-07 11:28:49,345 - mmcls - INFO - Saving checkpoint at 10 epochs
2023-02-07 11:28:52,232 - mmcls - INFO - Epoch(val) [10][6]	accuracy_top-1: 91.0839, accuracy_top-5: 100.0000
2023-02-07 11:28:58,213 - mmcls - INFO - Epoch [11][10/24]	lr: 1.000e-04, eta: 0:03:40, time: 0.589, data_time: 0.472, memory: 8234, loss: 0.6221
2023-02-07 11:29:01,913 - mmcls - INFO - Epoch [11][20/24]	lr: 1.000e-04, eta: 0:03:34, time: 0.370, data_time: 0.253, memory: 8234, loss: 0.6145
2023-02-07 11:29:03,090 - mmcls - INFO - Saving checkpoint at 11 epochs
2023-02-07 11:29:05,878 - mmcls - INFO - Epoch(val) [11][6]	accuracy_top-1: 92.8322, accuracy_top-5: 100.0000
2023-02-07 11:29:11,789 - mmcls - INFO - Epoch [12][10/24]	lr: 1.000e-04, eta: 0:03:26, time: 0.581, data_time: 0.465, memory: 8234, loss: 0.5731
2023-02-07 11:29:15,385 - mmcls - INFO - Epoch [12][20/24]	lr: 1.000e-04, eta: 0:03:20, time: 0.360, data_time: 0.243, memory: 8234, loss: 0.5827
2023-02-07 11:29:16,663 - mmcls - INFO - Saving checkpoint at 12 epochs
2023-02-07 11:29:19,513 - mmcls - INFO - Epoch(val) [12][6]	accuracy_top-1: 92.8322, accuracy_top-5: 100.0000
2023-02-07 11:29:25,587 - mmcls - INFO - Epoch [13][10/24]	lr: 1.000e-04, eta: 0:03:13, time: 0.598, data_time: 0.481, memory: 8234, loss: 0.5374
2023-02-07 11:29:29,176 - mmcls - INFO - Epoch [13][20/24]	lr: 1.000e-04, eta: 0:03:07, time: 0.359, data_time: 0.242, memory: 8234, loss: 0.5112
2023-02-07 11:29:30,415 - mmcls - INFO - Saving checkpoint at 13 epochs
2023-02-07 11:29:33,367 - mmcls - INFO - Epoch(val) [13][6]	accuracy_top-1: 92.6573, accuracy_top-5: 100.0000
2023-02-07 11:29:39,360 - mmcls - INFO - Epoch [14][10/24]	lr: 1.000e-04, eta: 0:03:00, time: 0.590, data_time: 0.474, memory: 8234, loss: 0.5242
2023-02-07 11:29:43,086 - mmcls - INFO - Epoch [14][20/24]	lr: 1.000e-04, eta: 0:02:54, time: 0.373, data_time: 0.256, memory: 8234, loss: 0.4884
2023-02-07 11:29:44,273 - mmcls - INFO - Saving checkpoint at 14 epochs
2023-02-07 11:29:47,077 - mmcls - INFO - Epoch(val) [14][6]	accuracy_top-1: 92.8322, accuracy_top-5: 100.0000
2023-02-07 11:29:53,091 - mmcls - INFO - Epoch [15][10/24]	lr: 1.000e-04, eta: 0:02:48, time: 0.592, data_time: 0.476, memory: 8234, loss: 0.4809
2023-02-07 11:29:56,797 - mmcls - INFO - Epoch [15][20/24]	lr: 1.000e-04, eta: 0:02:42, time: 0.371, data_time: 0.253, memory: 8234, loss: 0.4828
2023-02-07 11:29:57,981 - mmcls - INFO - Saving checkpoint at 15 epochs
2023-02-07 11:30:00,910 - mmcls - INFO - Epoch(val) [15][6]	accuracy_top-1: 92.8322, accuracy_top-5: 100.0000
2023-02-07 11:30:07,007 - mmcls - INFO - Epoch [16][10/24]	lr: 1.000e-04, eta: 0:02:36, time: 0.600, data_time: 0.483, memory: 8234, loss: 0.4554
2023-02-07 11:30:10,599 - mmcls - INFO - Epoch [16][20/24]	lr: 1.000e-04, eta: 0:02:31, time: 0.359, data_time: 0.241, memory: 8234, loss: 0.4455
2023-02-07 11:30:11,842 - mmcls - INFO - Saving checkpoint at 16 epochs
2023-02-07 11:30:14,634 - mmcls - INFO - Epoch(val) [16][6]	accuracy_top-1: 93.0070, accuracy_top-5: 100.0000
2023-02-07 11:30:20,661 - mmcls - INFO - Epoch [17][10/24]	lr: 1.000e-04, eta: 0:02:24, time: 0.593, data_time: 0.477, memory: 8234, loss: 0.4122
2023-02-07 11:30:24,773 - mmcls - INFO - Epoch [17][20/24]	lr: 1.000e-04, eta: 0:02:19, time: 0.411, data_time: 0.295, memory: 8234, loss: 0.4329
2023-02-07 11:30:26,374 - mmcls - INFO - Saving checkpoint at 17 epochs
2023-02-07 11:30:29,808 - mmcls - INFO - Epoch(val) [17][6]	accuracy_top-1: 93.1818, accuracy_top-5: 100.0000
2023-02-07 11:30:37,326 - mmcls - INFO - Epoch [18][10/24]	lr: 1.000e-04, eta: 0:02:14, time: 0.742, data_time: 0.616, memory: 8234, loss: 0.4459
2023-02-07 11:30:42,521 - mmcls - INFO - Epoch [18][20/24]	lr: 1.000e-04, eta: 0:02:10, time: 0.521, data_time: 0.397, memory: 8234, loss: 0.3769
2023-02-07 11:30:44,309 - mmcls - INFO - Saving checkpoint at 18 epochs
2023-02-07 11:30:48,755 - mmcls - INFO - Epoch(val) [18][6]	accuracy_top-1: 93.3566, accuracy_top-5: 100.0000
2023-02-07 11:30:56,945 - mmcls - INFO - Epoch [19][10/24]	lr: 1.000e-04, eta: 0:02:05, time: 0.809, data_time: 0.690, memory: 8234, loss: 0.3973
2023-02-07 11:31:02,855 - mmcls - INFO - Epoch [19][20/24]	lr: 1.000e-04, eta: 0:02:01, time: 0.591, data_time: 0.465, memory: 8234, loss: 0.3828
2023-02-07 11:31:04,724 - mmcls - INFO - Saving checkpoint at 19 epochs
2023-02-07 11:31:09,286 - mmcls - INFO - Epoch(val) [19][6]	accuracy_top-1: 93.5315, accuracy_top-5: 100.0000
2023-02-07 11:31:17,156 - mmcls - INFO - Epoch [20][10/24]	lr: 1.000e-04, eta: 0:01:56, time: 0.778, data_time: 0.652, memory: 8234, loss: 0.3983
2023-02-07 11:31:22,592 - mmcls - INFO - Epoch [20][20/24]	lr: 1.000e-04, eta: 0:01:52, time: 0.545, data_time: 0.418, memory: 8234, loss: 0.3776
2023-02-07 11:31:24,278 - mmcls - INFO - Saving checkpoint at 20 epochs
2023-02-07 11:31:28,535 - mmcls - INFO - Epoch(val) [20][6]	accuracy_top-1: 93.8811, accuracy_top-5: 100.0000
2023-02-07 11:31:35,071 - mmcls - INFO - Epoch [21][10/24]	lr: 1.000e-04, eta: 0:01:45, time: 0.644, data_time: 0.527, memory: 8234, loss: 0.3862
2023-02-07 11:31:39,543 - mmcls - INFO - Epoch [21][20/24]	lr: 1.000e-04, eta: 0:01:41, time: 0.447, data_time: 0.329, memory: 8234, loss: 0.3720
2023-02-07 11:31:40,883 - mmcls - INFO - Saving checkpoint at 21 epochs
2023-02-07 11:31:44,449 - mmcls - INFO - Epoch(val) [21][6]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-07 11:31:50,885 - mmcls - INFO - Epoch [22][10/24]	lr: 1.000e-04, eta: 0:01:34, time: 0.634, data_time: 0.517, memory: 8234, loss: 0.3600
2023-02-07 11:31:54,965 - mmcls - INFO - Epoch [22][20/24]	lr: 1.000e-04, eta: 0:01:29, time: 0.408, data_time: 0.289, memory: 8234, loss: 0.3580
2023-02-07 11:31:56,298 - mmcls - INFO - Saving checkpoint at 22 epochs
2023-02-07 11:31:59,336 - mmcls - INFO - Epoch(val) [22][6]	accuracy_top-1: 93.8811, accuracy_top-5: 100.0000
2023-02-07 11:32:05,247 - mmcls - INFO - Epoch [23][10/24]	lr: 1.000e-04, eta: 0:01:23, time: 0.582, data_time: 0.463, memory: 8234, loss: 0.3459
2023-02-07 11:32:08,795 - mmcls - INFO - Epoch [23][20/24]	lr: 1.000e-04, eta: 0:01:18, time: 0.355, data_time: 0.235, memory: 8234, loss: 0.3469
2023-02-07 11:32:10,044 - mmcls - INFO - Saving checkpoint at 23 epochs
2023-02-07 11:32:12,939 - mmcls - INFO - Epoch(val) [23][6]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-07 11:32:18,756 - mmcls - INFO - Epoch [24][10/24]	lr: 1.000e-04, eta: 0:01:11, time: 0.572, data_time: 0.454, memory: 8234, loss: 0.3603
2023-02-07 11:32:22,447 - mmcls - INFO - Epoch [24][20/24]	lr: 1.000e-04, eta: 0:01:06, time: 0.369, data_time: 0.253, memory: 8234, loss: 0.3244
2023-02-07 11:32:23,717 - mmcls - INFO - Saving checkpoint at 24 epochs
2023-02-07 11:32:26,582 - mmcls - INFO - Epoch(val) [24][6]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-07 11:32:32,451 - mmcls - INFO - Epoch [25][10/24]	lr: 1.000e-04, eta: 0:01:00, time: 0.577, data_time: 0.461, memory: 8234, loss: 0.3268
2023-02-07 11:32:36,012 - mmcls - INFO - Epoch [25][20/24]	lr: 1.000e-04, eta: 0:00:55, time: 0.356, data_time: 0.240, memory: 8234, loss: 0.3228
2023-02-07 11:32:37,234 - mmcls - INFO - Saving checkpoint at 25 epochs
2023-02-07 11:32:40,063 - mmcls - INFO - Epoch(val) [25][6]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-07 11:32:46,012 - mmcls - INFO - Epoch [26][10/24]	lr: 1.000e-04, eta: 0:00:49, time: 0.585, data_time: 0.469, memory: 8234, loss: 0.3140
2023-02-07 11:32:49,677 - mmcls - INFO - Epoch [26][20/24]	lr: 1.000e-04, eta: 0:00:44, time: 0.367, data_time: 0.250, memory: 8234, loss: 0.3134
2023-02-07 11:32:50,840 - mmcls - INFO - Saving checkpoint at 26 epochs
2023-02-07 11:32:53,596 - mmcls - INFO - Epoch(val) [26][6]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-07 11:32:59,533 - mmcls - INFO - Epoch [27][10/24]	lr: 1.000e-04, eta: 0:00:38, time: 0.584, data_time: 0.468, memory: 8234, loss: 0.2995
2023-02-07 11:33:03,063 - mmcls - INFO - Epoch [27][20/24]	lr: 1.000e-04, eta: 0:00:33, time: 0.353, data_time: 0.236, memory: 8234, loss: 0.3334
2023-02-07 11:33:04,208 - mmcls - INFO - Saving checkpoint at 27 epochs
2023-02-07 11:33:06,978 - mmcls - INFO - Epoch(val) [27][6]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-07 11:33:12,792 - mmcls - INFO - Epoch [28][10/24]	lr: 1.000e-04, eta: 0:00:27, time: 0.572, data_time: 0.454, memory: 8234, loss: 0.3062
2023-02-07 11:33:16,384 - mmcls - INFO - Epoch [28][20/24]	lr: 1.000e-04, eta: 0:00:23, time: 0.359, data_time: 0.242, memory: 8234, loss: 0.3044
2023-02-07 11:33:17,606 - mmcls - INFO - Saving checkpoint at 28 epochs
2023-02-07 11:33:20,443 - mmcls - INFO - Epoch(val) [28][6]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-07 11:33:26,293 - mmcls - INFO - Epoch [29][10/24]	lr: 1.000e-04, eta: 0:00:16, time: 0.575, data_time: 0.459, memory: 8234, loss: 0.2976
2023-02-07 11:33:30,010 - mmcls - INFO - Epoch [29][20/24]	lr: 1.000e-04, eta: 0:00:12, time: 0.372, data_time: 0.254, memory: 8234, loss: 0.3050
2023-02-07 11:33:31,230 - mmcls - INFO - Saving checkpoint at 29 epochs
2023-02-07 11:33:34,059 - mmcls - INFO - Epoch(val) [29][6]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-07 11:33:39,858 - mmcls - INFO - Epoch [30][10/24]	lr: 1.000e-04, eta: 0:00:06, time: 0.570, data_time: 0.452, memory: 8234, loss: 0.2920
2023-02-07 11:33:43,423 - mmcls - INFO - Epoch [30][20/24]	lr: 1.000e-04, eta: 0:00:01, time: 0.357, data_time: 0.239, memory: 8234, loss: 0.2986
2023-02-07 11:33:44,640 - mmcls - INFO - Saving checkpoint at 30 epochs
2023-02-07 11:33:47,374 - mmcls - INFO - Epoch(val) [30][6]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
