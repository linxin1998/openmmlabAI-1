{"env_info": "sys.platform: linux\nPython: 3.7.13 (default, Oct 18 2022, 18:57:03) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda-11.1\nNVCC: Cuda compilation tools, release 11.1, V11.1.74\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.10.1+cu111\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX512\n  - CUDA Runtime 11.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.11.2+cu111\nOpenCV: 4.6.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.1\nMMClassification: 0.25.0+", "seed": 39842424, "mmcls_version": "0.25.0", "config": "model = dict(\n    type='ImageClassifier',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(3, ),\n        style='pytorch'),\n    neck=dict(type='GlobalAveragePooling'),\n    head=dict(\n        type='LinearClsHead',\n        num_classes=10,\n        in_channels=2048,\n        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),\n        topk=(1, 5)))\ndataset_type = 'ImageNet'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='RandomResizedCrop', size=224),\n    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='ImageToTensor', keys=['img']),\n    dict(type='ToTensor', keys=['gt_label']),\n    dict(type='Collect', keys=['img', 'gt_label'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='Resize', size=(256, -1)),\n    dict(type='CenterCrop', crop_size=224),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='ImageToTensor', keys=['img']),\n    dict(type='Collect', keys=['img'])\n]\ndata = dict(\n    samples_per_gpu=1024,\n    workers_per_gpu=1,\n    train=dict(\n        type='CIFAR10',\n        data_prefix='/media/ders/linxin/mmclassification-master/dataset/',\n        pipeline=[\n            dict(type='RandomCrop', size=32, padding=4),\n            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),\n            dict(\n                type='Normalize',\n                mean=[125.307, 122.961, 113.8575],\n                std=[51.5865, 50.847, 51.255],\n                to_rgb=False),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='ToTensor', keys=['gt_label']),\n            dict(type='Collect', keys=['img', 'gt_label'])\n        ]),\n    val=dict(\n        type='CIFAR10',\n        data_prefix='/media/ders/linxin/mmclassification-master/dataset/',\n        pipeline=[\n            dict(\n                type='Normalize',\n                mean=[125.307, 122.961, 113.8575],\n                std=[51.5865, 50.847, 51.255],\n                to_rgb=False),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ],\n        test_mode=True),\n    test=dict(\n        type='CIFAR10',\n        data_prefix='/media/ders/linxin/mmclassification-master/dataset/',\n        pipeline=[\n            dict(\n                type='Normalize',\n                mean=[125.307, 122.961, 113.8575],\n                std=[51.5865, 50.847, 51.255],\n                to_rgb=False),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ],\n        test_mode=True))\nevaluation = dict(interval=1, metric='accuracy')\noptimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(policy='step', step=[30, 60, 90])\nrunner = dict(type='EpochBasedRunner', max_epochs=50)\ncheckpoint_config = dict(interval=10)\nlog_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'resnet50_8xb32_in1k_20210831-ea4938fc.pth'\nresume_from = None\nworkflow = [('train', 1)]\nwork_dir = 'cifar10_resnet50'\ngpu_ids = [3]\ndevice = 'cuda'\nseed = 39842424\n", "CLASSES": ["airplane", "automobile", "bird", "cat", "deer", "dog", "frog", "horse", "ship", "truck"]}
{"mode": "val", "epoch": 1, "iter": 10, "lr": 0.001, "accuracy_top-1": 36.88, "accuracy_top-5": 86.93}
{"mode": "val", "epoch": 2, "iter": 10, "lr": 0.001, "accuracy_top-1": 49.44, "accuracy_top-5": 92.72}
{"mode": "val", "epoch": 3, "iter": 10, "lr": 0.001, "accuracy_top-1": 58.23, "accuracy_top-5": 95.56}
{"mode": "val", "epoch": 4, "iter": 10, "lr": 0.001, "accuracy_top-1": 62.93, "accuracy_top-5": 96.57999}
{"mode": "val", "epoch": 5, "iter": 10, "lr": 0.001, "accuracy_top-1": 66.34, "accuracy_top-5": 97.23}
{"mode": "val", "epoch": 6, "iter": 10, "lr": 0.001, "accuracy_top-1": 68.96, "accuracy_top-5": 97.65}
{"mode": "val", "epoch": 7, "iter": 10, "lr": 0.001, "accuracy_top-1": 71.08, "accuracy_top-5": 97.89}
{"mode": "val", "epoch": 8, "iter": 10, "lr": 0.001, "accuracy_top-1": 72.85, "accuracy_top-5": 98.04}
{"mode": "val", "epoch": 9, "iter": 10, "lr": 0.001, "accuracy_top-1": 74.06, "accuracy_top-5": 98.23}
{"mode": "val", "epoch": 10, "iter": 10, "lr": 0.001, "accuracy_top-1": 75.1, "accuracy_top-5": 98.41}
{"mode": "val", "epoch": 11, "iter": 10, "lr": 0.001, "accuracy_top-1": 76.1, "accuracy_top-5": 98.53}
{"mode": "val", "epoch": 12, "iter": 10, "lr": 0.001, "accuracy_top-1": 76.48, "accuracy_top-5": 98.57}
{"mode": "val", "epoch": 13, "iter": 10, "lr": 0.001, "accuracy_top-1": 77.2, "accuracy_top-5": 98.59}
{"mode": "val", "epoch": 14, "iter": 10, "lr": 0.001, "accuracy_top-1": 77.84, "accuracy_top-5": 98.7}
{"mode": "val", "epoch": 15, "iter": 10, "lr": 0.001, "accuracy_top-1": 78.68, "accuracy_top-5": 98.75}
{"mode": "val", "epoch": 16, "iter": 10, "lr": 0.001, "accuracy_top-1": 79.16, "accuracy_top-5": 98.82999}
{"mode": "val", "epoch": 17, "iter": 10, "lr": 0.001, "accuracy_top-1": 79.46, "accuracy_top-5": 98.87}
{"mode": "val", "epoch": 18, "iter": 10, "lr": 0.001, "accuracy_top-1": 79.88, "accuracy_top-5": 98.85}
{"mode": "val", "epoch": 19, "iter": 10, "lr": 0.001, "accuracy_top-1": 79.83, "accuracy_top-5": 98.86}
{"mode": "val", "epoch": 20, "iter": 10, "lr": 0.001, "accuracy_top-1": 80.43999, "accuracy_top-5": 98.95}
{"mode": "val", "epoch": 21, "iter": 10, "lr": 0.001, "accuracy_top-1": 80.71, "accuracy_top-5": 98.93999}
{"mode": "val", "epoch": 22, "iter": 10, "lr": 0.001, "accuracy_top-1": 81.0, "accuracy_top-5": 98.97}
{"mode": "val", "epoch": 23, "iter": 10, "lr": 0.001, "accuracy_top-1": 80.7, "accuracy_top-5": 98.93}
{"mode": "val", "epoch": 24, "iter": 10, "lr": 0.001, "accuracy_top-1": 81.53, "accuracy_top-5": 98.99}
{"mode": "val", "epoch": 25, "iter": 10, "lr": 0.001, "accuracy_top-1": 81.67, "accuracy_top-5": 99.00999}
{"mode": "val", "epoch": 26, "iter": 10, "lr": 0.001, "accuracy_top-1": 81.84, "accuracy_top-5": 99.02}
{"mode": "val", "epoch": 27, "iter": 10, "lr": 0.001, "accuracy_top-1": 81.89, "accuracy_top-5": 99.07}
{"mode": "val", "epoch": 28, "iter": 10, "lr": 0.001, "accuracy_top-1": 82.24, "accuracy_top-5": 99.06}
{"mode": "val", "epoch": 29, "iter": 10, "lr": 0.001, "accuracy_top-1": 82.3, "accuracy_top-5": 99.09}
{"mode": "val", "epoch": 30, "iter": 10, "lr": 0.001, "accuracy_top-1": 82.41, "accuracy_top-5": 99.07}
{"mode": "val", "epoch": 31, "iter": 10, "lr": 0.0001, "accuracy_top-1": 82.6, "accuracy_top-5": 99.07999}
{"mode": "val", "epoch": 32, "iter": 10, "lr": 0.0001, "accuracy_top-1": 82.52, "accuracy_top-5": 99.1}
{"mode": "val", "epoch": 33, "iter": 10, "lr": 0.0001, "accuracy_top-1": 82.72, "accuracy_top-5": 99.07999}
{"mode": "val", "epoch": 34, "iter": 10, "lr": 0.0001, "accuracy_top-1": 82.63, "accuracy_top-5": 99.03}
{"mode": "val", "epoch": 35, "iter": 10, "lr": 0.0001, "accuracy_top-1": 82.7, "accuracy_top-5": 99.05}
{"mode": "val", "epoch": 36, "iter": 10, "lr": 0.0001, "accuracy_top-1": 82.68, "accuracy_top-5": 99.07}
{"mode": "val", "epoch": 37, "iter": 10, "lr": 0.0001, "accuracy_top-1": 82.65, "accuracy_top-5": 99.1}
{"mode": "val", "epoch": 38, "iter": 10, "lr": 0.0001, "accuracy_top-1": 82.68, "accuracy_top-5": 99.07999}
{"mode": "val", "epoch": 39, "iter": 10, "lr": 0.0001, "accuracy_top-1": 82.81, "accuracy_top-5": 99.05}
{"mode": "val", "epoch": 40, "iter": 10, "lr": 0.0001, "accuracy_top-1": 82.62, "accuracy_top-5": 99.1}
{"mode": "val", "epoch": 41, "iter": 10, "lr": 0.0001, "accuracy_top-1": 82.77, "accuracy_top-5": 99.15}
{"mode": "val", "epoch": 42, "iter": 10, "lr": 0.0001, "accuracy_top-1": 82.71, "accuracy_top-5": 99.06}
{"mode": "val", "epoch": 43, "iter": 10, "lr": 0.0001, "accuracy_top-1": 82.81, "accuracy_top-5": 99.04}
{"mode": "val", "epoch": 44, "iter": 10, "lr": 0.0001, "accuracy_top-1": 82.72, "accuracy_top-5": 99.1}
{"mode": "val", "epoch": 45, "iter": 10, "lr": 0.0001, "accuracy_top-1": 82.73, "accuracy_top-5": 99.09}
{"mode": "val", "epoch": 46, "iter": 10, "lr": 0.0001, "accuracy_top-1": 82.83, "accuracy_top-5": 99.1}
{"mode": "val", "epoch": 47, "iter": 10, "lr": 0.0001, "accuracy_top-1": 82.68999, "accuracy_top-5": 99.09}
{"mode": "val", "epoch": 48, "iter": 10, "lr": 0.0001, "accuracy_top-1": 82.75, "accuracy_top-5": 99.16}
{"mode": "val", "epoch": 49, "iter": 10, "lr": 0.0001, "accuracy_top-1": 82.74, "accuracy_top-5": 99.09}
{"mode": "val", "epoch": 50, "iter": 10, "lr": 0.0001, "accuracy_top-1": 82.72, "accuracy_top-5": 99.11}
